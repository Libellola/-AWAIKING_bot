import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.chat_member_status import ChatMemberStatus
from yookassa import Configuration, Payment

# ---------- –õ–û–ì–ò ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot")

# ---------- ENV ----------
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL = os.getenv("TELEGRAM_CHANNEL_ID")          # @username –∏–ª–∏ -100...
TILDA_PAGE_URL = os.getenv("TILDA_PAGE_URL")

YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty")

USE_YOOKASSA_API = bool(YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY)
if USE_YOOKASSA_API:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
    log.info("YooKassa: keys detected, API mode ON")
else:
    log.warning("YooKassa: keys NOT set, API mode OFF")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ---------- STATE ----------
PURCHASED: set[int] = set()
SESSIONS: dict[int, str] = {}
PAYMENTS: dict[int, str] = {}   # user_id -> payment_id

# ---------- PRODUCT ----------
PRODUCTS = {
    "KLYUCH": {
        "title": "–í–µ—Ç–∫–∞ ¬´–ö–õ–Æ–ß¬ª",
        "tilda_url": TILDA_PAGE_URL,
        "price_rub": 568,
        "description": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ö–õ–Æ–ß¬ª"
    }
}
DEFAULT_PRODUCT_KEY = "KLYCH" if False else "KLYUCH"  # –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ :)

# ---------- TEXTS ----------
TEXT_WELCOME = (
    "–Ø —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–∞–º...\n\n"
    "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –∏ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ (–ø–∏—à–∏ ¬´–•–û–ß–£¬ª)."
)
TEXT_OFFER = (
    "–ú–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–∞–ª—ã–π –ø—É—Ç—å... "
    f"–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤–∞ ‚Äî –∂–º–∏ ¬´–ö—É–ø–∏—Ç—å¬ª. –°–µ–π—á–∞—Å ‚Äî –≤—Å–µ–≥–æ –∑–∞ {PRODUCTS[DEFAULT_PRODUCT_KEY]['price_rub']} —Ä—É–±."
)
TEXT_REMINDER = (
    "–¢—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–∞–±—Ä–∞–ª–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã—Å—Ç—Ä–æ –¥–∞—é—Ç —Ä–∞–±–æ—á–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã? "
    "–≠—Ç–æ –Ω–µ –º–∞–≥–∏—è ‚Äî —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ñ–º–∏ ¬´–ö—É–ø–∏—Ç—å¬ª."
)
TEXT_PAY_FIRST = (
    "üîí –î–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n"
    "–ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∞, –ø–æ–¥–æ–∂–¥–∏ 10‚Äì30 —Å–µ–∫ –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª–∞¬ª –µ—â—ë —Ä–∞–∑."
)

# ---------- KEYBOARDS ----------
def kb_want():
    kb = InlineKeyboardBuilder()
    kb.button(text="–•–û–ß–£", callback_data="want")
    return kb.as_markup()

def kb_sub():
    kb = InlineKeyboardBuilder()
    url = f"https://t.me/{CHANNEL.replace('@','')}" if CHANNEL and CHANNEL.startswith("@") else "https://t.me/"
    kb.button(text="üí´ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=url)
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    kb.adjust(1)
    return kb.as_markup()

def kb_pay(url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)
    kb.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª–∞", callback_data="paid_check")
    kb.adjust(1)
    return kb.as_markup()

def kb_access(tilda_url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üé• –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", url=tilda_url)
    kb.adjust(1)
    return kb.as_markup()

# ---------- HELPERS ----------
def parse_payload(text: str | None) -> str:
    text = (text or "").strip()
    parts = text.split(maxsplit=1)
    if len(parts) == 2 and parts[0].startswith("/start"):
        return parts[1].upper()
    if text.startswith("/start") and len(text) > 6:
        return text[6:].upper()
    return DEFAULT_PRODUCT_KEY

async def schedule_reminder(chat_id: int, product_key: str):
    """–ß–µ—Ä–µ–∑ 1 —á–∞—Å –Ω–∞–ø–æ–º–Ω–∏–º, –µ—Å–ª–∏ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∞."""
    try:
        await asyncio.sleep(60 * 60)
        if chat_id not in PURCHASED:
            await bot.send_message(chat_id, TEXT_REMINDER)
    except Exception as e:
        log.warning("Reminder error: %r", e)

def create_payment(user_id: int, product_key: str) -> str:
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –≤ YooKassa –∏ –≤–µ—Ä–Ω—É—Ç—å confirmation_url."""
    if not USE_YOOKASSA_API:
        raise RuntimeError("YooKassa API keys are not configured")

    product = PRODUCTS.get(product_key, PRODUCTS[DEFAULT_PRODUCT_KEY])
    amount = product["price_rub"]
    description = (product.get("description") or product["title"])[:128]

    payment = Payment.create({
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "capture": True,
        "confirmation": {"type": "redirect"},
        "description": f"{description} (user_id={user_id})",
        "metadata": {"user_id": user_id, "product_key": product_key}
    })
    PAYMENTS[user_id] = payment.id
    return payment.confirmation.confirmation_url

async def wait_payment_succeeded(user_id: int, retries: int = 6, delay_sec: float = 5.0) -> bool:
    """–û–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ ~30 —Å–µ–∫."""
    pid = PAYMENTS.get(user_id)
    if not pid:
        return False
    for _ in range(retries):
        try:
            p = Payment.find_one(pid)
            if p.status == "succeeded":
                return True
            if p.status in ("canceled",):
                return False
        except Exception as e:
            log.warning("YooKassa find_one error: %r", e)
        await asyncio.sleep(delay_sec)
    return False
# ========= –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ =========
async def schedule_reminder(chat_id: int, product_key: str):
    # —á–µ—Ä–µ–∑ 1 —á–∞—Å –Ω–∞–ø–æ–º–Ω–∏–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â—ë –Ω–µ –æ–ø–ª–∞—Ç–∏–ª
    await asyncio.sleep(60 * 60)
    if chat_id in PURCHASED:
        return
    try:
        await bot.send_message(
            chat_id,
            TEXT_REMINDER,
            reply_markup=kb_pay(create_payment(chat_id, product_key)) if USE_YOOKASSA_API else None
        )
    except Exception as e:
        print("REMINDER ERROR:", repr(e))

async def send_access(chat_id: int, product_key: str):
    product = PRODUCTS.get(product_key, PRODUCTS[DEFAULT_PRODUCT_KEY])
    await bot.send_message(
        chat_id,
        "‚ú® –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø.\n\n"
        "–ü—É—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∞ –º—è–≥–∫–æ –≤–µ–¥—ë—Ç —Ç–µ–±—è üå∏",
        reply_markup=kb_access(product["tilda_url"]),
        disable_web_page_preview=True
    )

# ---------- HANDLERS ----------
@dp.message(CommandStart())
async def on_start(m: Message):
    key = parse_payload(m.text)
    if key not in PRODUCTS:
        key = DEFAULT_PRODUCT_KEY
    SESSIONS[m.chat.id] = key
    await m.answer(TEXT_WELCOME, reply_markup=kb_want())

@dp.callback_query(F.data == "want")
async def on_want(c: CallbackQuery):
    await c.message.edit_text(
        "–®–∞–≥ 1: –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
        reply_markup=kb_sub()
    )
    await c.answer()

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(c: CallbackQuery):
    ok = False
    try:
        member = await bot.get_chat_member(CHANNEL, c.from_user.id)
        ok = member.status in (
            ChatMemberStatus.MEMBER,
            ChatMemberStatus.ADMINISTRATOR,
            ChatMemberStatus.CREATOR
        )
    except Exception:
        ok = False

    if ok:
        product_key = SESSIONS.get(c.from_user.id, DEFAULT_PRODUCT_KEY)
        if not USE_YOOKASSA_API:
            await c.message.edit_text("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        else:
            try:
                pay_url = create_payment(c.from_user.id, product_key)
                await c.message.edit_text(TEXT_OFFER, reply_markup=kb_pay(pay_url))
            except Exception as e:
                log.error("YooKassa create error: %r", e)
                await c.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        # –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        asyncio.create_task(schedule_reminder(c.from_user.id, product_key))
    else:
        await c.message.edit_text(
            "–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç ü§ç\n–ù–∞–∂–º–∏ ¬´üí´ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª, –∑–∞—Ç–µ–º ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=kb_sub()
        )
    await c.answer()

@dp.callback_query(F.data == "paid_check")
async def on_paid_check(c: CallbackQuery):
    product_key = SESSIONS.get(c.from_user.id, DEFAULT_PRODUCT_KEY)

    if not USE_YOOKASSA_API:
        await c.message.edit_text("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
        await c.answer()
        return

    if c.from_user.id not in PAYMENTS:
        # –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ –ø–ª–∞—Ç—ë–∂ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º —Å–µ–π—á–∞—Å
        try:
            pay_url = create_payment(c.from_user.id, product_key)
            await c.message.edit_text(TEXT_PAY_FIRST, reply_markup=kb_pay(pay_url))
            await c.answer()
            return
        except Exception as e:
            log.error("YooKassa create (from paid_check) error: %r", e)
            await c.message.edit_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ù–∞–∂–º–∏ ¬´–ö—É–ø–∏—Ç—å¬ª –µ—â—ë —Ä–∞–∑.")
            await c.answer()
            return

    ok = await wait_payment_succeeded(c.from_user.id, retries=6, delay_sec=5.0)
    if ok:
        PURCHASED.add(c.from_user.id)
        try:
            await c.message.delete()
        except Exception:
            pass
        await send_access(c.from_user.id, product_key)
    else:
        # –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω ‚Äî —Å–Ω–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –∂–µ –ø–ª–∞—Ç—ë–∂
        pid = PAY







