import os
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums.chat_member_status import ChatMemberStatus
from yookassa import Configuration, Payment

# ========= ENV =========
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL = os.getenv("TELEGRAM_CHANNEL_ID")          # @username –∏–ª–∏ -100...
TILDA_PAGE_URL = os.getenv("TILDA_PAGE_URL")

YOOKASSA_SHOP_ID = os.getenv("YOOKASSA_SHOP_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is empty")

USE_YOOKASSA_API = bool(YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY)
if USE_YOOKASSA_API:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

PURCHASED: set[int] = set()
SESSIONS: dict[int, str] = {}
PAYMENTS: dict[int, str] = {}   # user_id -> payment_id

# ========= –ü–†–û–î–£–ö–¢ =========
PRODUCTS = {
    "KLYUCH": {
        "title": "–í–µ—Ç–∫–∞ ¬´–ö–õ–Æ–ß¬ª",
        "tilda_url": TILDA_PAGE_URL,
        "price_rub": 568,
        "description": "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ö–õ–Æ–ß¬ª"
    }
}
DEFAULT_PRODUCT_KEY = "KLYUCH"

# ========= –¢–ï–ö–°–¢–´ =========
TEXT_WELCOME = (
    "–Ø —Ä–∞–¥–∞ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ—ë–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ. –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Ç—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–º–µ–Ω–∞–º..."
    "\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –∏ –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ (–ø–∏—à–∏ ¬´–•–û–ß–£¬ª)."
)
TEXT_OFFER = (
    "–ú–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ –Ω–µ–º–∞–ª—ã–π –ø—É—Ç—å... "
    f"–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤–∞ ‚Äî –∂–º–∏ ¬´–ö—É–ø–∏—Ç—å¬ª. –°–µ–π—á–∞—Å ‚Äî –≤—Å–µ–≥–æ –∑–∞ {PRODUCTS[DEFAULT_PRODUCT_KEY]['price_rub']} —Ä—É–±."
)
TEXT_REMINDER = (
    "–¢—ã –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –∑–∞–±—Ä–∞–ª–∞ –ø—Ä–æ–¥—É–∫—Ç—ã... –≠—Ç–æ –Ω–µ –º–∞–≥–∏—è ‚Äî —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ñ–º–∏ ¬´–ö—É–ø–∏—Ç—å¬ª."
)
TEXT_PAY_FIRST = (
    "üîí –î–æ—Å—Ç—É–ø –≤—ã–¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.\n"
    "–ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∞, –ø–æ–¥–æ–∂–¥–∏ 10‚Äì30 —Å–µ–∫ –∏ –Ω–∞–∂–º–∏ ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª–∞¬ª –µ—â—ë —Ä–∞–∑."
)

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def kb_want():
    kb = InlineKeyboardBuilder()
    kb.button(text="–•–û–ß–£", callback_data="want")
    return kb.as_markup()

def kb_sub():
    kb = InlineKeyboardBuilder()
    url = f"https://t.me/{CHANNEL.replace('@','')}" if CHANNEL and CHANNEL.startswith("@") else "https://t.me/"
    kb.button(text="üí´ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=url)
    kb.button(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")
    kb.adjust(1)
    return kb.as_markup()

def kb_pay(url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)
    kb.button(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª–∞", callback_data="paid_check")
    kb.adjust(1)
    return kb.as_markup()

def kb_access(tilda_url: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üé• –û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏", url=tilda_url)
    kb.adjust(1)
    return kb.as_markup()

# ========= –ÆKassa helpers =========
def create_payment(user_id: int, product_key: str) -> str:
    if not USE_YOOKASSA_API:
        raise RuntimeError("YooKassa API keys are not configured")

    product = PRODUCTS.get(product_key, PRODUCTS[DEFAULT_PRODUCT_KEY])
    amount = product["price_rub"]
    description = (product.get("description") or product["title"])[:128]

    payment = Payment.create({
        "amount": {"value": f"{amount:.2f}", "currency": "RUB"},
        "capture": True,
        "confirmation": {
            "type": "redirect",
            # –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ –±–æ—Ç–∞
            # "return_url": "https://t.me/AWAIKING_bot?start=paid"
        },
        "description": f"{description} (user_id={user_id})",
        "metadata": {"user_id": user_id, "product_key": product_key}
    })
    PAYMENTS[user_id] = payment.id
    return payment.confirmation.confirmation_url

async def wait_payment_succeeded(user_id: int, retries: int = 6, delay_sec: float = 5.0) -> bool:
    """–û–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ (–¥–æ ~30 —Å–µ–∫ —Å—É–º–º–∞—Ä–Ω–æ)."""
    pid = PAYMENTS.get(user_id)
    if not pid:
        return False
    for _ in range(retries):
        try:
            p = Payment.find_one(pid)
            if p.status == "succeeded":
                return True
            if p.status in ("canceled", "waiting_for_capture"):
                # canceled ‚Äî —Ç–æ—á–Ω–æ –Ω–µ—Ç; waiting_for_capture ‚Äî —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ –ø–æ–¥–æ–∂–¥—ë–º
                pass
        except Exception as e:
            print("YOOKASSA FIND ERROR:", repr(e))
        await asyncio.sleep(delay_sec)
    return False

async def send_access(chat_id: int, product_key: str):
    product = PRODUCTS.get(product_key, PRODUCTS[DEFAULT_PRODUCT_KEY])
    await bot.send_message(
        chat_id,
        "‚ú® –ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø.\n\n"
        "–ü—É—Å—Ç—å –ø—Ä–∞–∫—Ç–∏–∫–∞ –º—è–≥–∫–æ –≤–µ–¥—ë—Ç —Ç–µ–±—è üå∏",
        reply_markup=kb_access(product["tilda_url"]),
        disable_web_page_preview=True
    )

# ========= –•–≠–ù–î–õ–ï–†–´ =========
@dp.message(CommandStart())
async def on_start(m: Message):
    payload = (m.text or "").split(maxsplit=1)
    key = (payload[1] if len(payload) == 2 else DEFAULT_PRODUCT_KEY).upper()
    if key not in PRODUCTS:
        key = DEFAULT_PRODUCT_KEY
    SESSIONS[m.chat.id] = key
    await m.answer(TEXT_WELCOME, reply_markup=kb_want())

@dp.callback_query(F.data == "want")
async def on_want(c: CallbackQuery):
    await c.message.edit_text(
        "–®–∞–≥ 1: –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, –≤–µ—Ä–Ω–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
        reply_markup=kb_sub()
    )
    await c.answer()

@dp.callback_query(F.data == "check_sub")
async def on_check_sub(c: CallbackQuery):
    ok = False
    try:
        member = await bot.get_chat_member(CHANNEL, c.from_user.id)
        ok = member.status in (ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR)
    except Exception:
        ok = False

    if ok:
        product_key = SESSIONS.get(c.from_user.id, DEFAULT_PRODUCT_KEY)
        if not USE_YOOKASSA_API:
            await c.message.edit_text(
                "–ü–ª–∞—Ç—ë–∂–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–≤—è–∂–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            )
        else:
            # —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –æ–ø–ª–∞—Ç—ã
            try:
                pay_url = create_payment(c.from_user.id, product_key)
                await c.message.edit_text(TEXT_OFFER, reply_markup=kb_pay(pay_url))
            except Exception as e:
                print("YOOKASSA CREATE ERROR:", repr(e))
                await c.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —á–∞—Å
        asyncio.create_task(asyncio.sleep(0))  # –ø—Ä–æ—Å—Ç–æ, —á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è –ª–∏–Ω—Ç–µ—Ä :)
        asyncio.create_task(schedule_reminder(c.from_user.id, product_key))
    else:
        await c.message.edit_text(
            "–ü–æ—Ö–æ–∂–µ, –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç ü§ç\n–ù–∞–∂–º–∏ ¬´üí´ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª¬ª, –∑–∞—Ç–µ–º ¬´‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.",
            reply_markup=kb_sub()
        )
    await c.answer()

@dp.callback_query(F.data == "paid_check")
async def on_paid_check(c: CallbackQuery):
    product_key = SESSIONS.get(c.from_user.id, DEFAULT_PRODUCT_KEY)

    if not USE_YOOKASSA_API:
        await c.message.edit_text("–ü–ª–∞—Ç—ë–∂–Ω—ã–π –º–æ–¥—É–ª—å –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–≤—è–∂–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")
        await c.answer()
        return

    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –ø–ª–∞—Ç—ë–∂ ‚Äî —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å
    if c.from_user.id not in PAYMENTS:
        try:
            pay_url = create_payment(c.from_user.id, product_key)
            await c.message.edit_text(
                TEXT_PAY_FIRST, reply_markup=kb_pay(pay_url)
            )
            await c.answer()
            return
        except Exception as e:
            print("YOOKASSA CREATE ERROR (from paid_check):", repr(e))
            await c.message.edit_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂. –ü–æ–ø—Ä–æ–±—É–π ¬´–ö—É–ø–∏—Ç—å¬ª –µ—â—ë —Ä–∞–∑.")
            await c.answer()
            return

    # –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞)
    ok = await wait_payment_succeeded(c.from_user.id, retries=6, delay_sec=5.0)
    if ok:
        PURCHASED.add(c.from_user.id)
        try:
            await c.message.delete()
        except Exception:
            pass
        await send_access(c.from_user.id, product_key)
    else:
        # –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ—à—ë–ª ‚Äî —Å–Ω–æ–≤–∞ –≤—ã–¥–∞—ë–º –∫–Ω–æ–ø–∫—É –Ω–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂
        pid = PAYMENTS.get(c.from_user.id)
        pay_url = None
        try:
            p = Payment.find_one(pid)
            pay_url = getattr(getattr(p, "confirmation", None), "confirmation_url", None)
        except Exception as e:
            print("YOOKASSA FIND ERROR 2:", repr(e))
        if not pay_url:
            try:
                pay_url = create_payment(c.from_user.id, product_key)
            except Exception as e:
                print("YOOKASSA CREATE ERROR 2:", repr(e))
        await c.message.edit_text(
            TEXT_PAY_FIRST,
            reply_markup=kb_pay(pay_url) if pay_url else None
        )
    await c.answer()

# –∑–∞–ø–∞—Å–Ω–æ–π: –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message(F.text.regexp(r"^/access($|\s)"))
async def on_access(m: Message):
    product_key = SESSIONS.get(m.chat.id, DEFAULT_PRODUCT_KEY)
    await send_access(m.chat.id, product_key)

print("AWAIKING BOT starting‚Ä¶ (smart YooKassa, per-user invoices)")
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))






